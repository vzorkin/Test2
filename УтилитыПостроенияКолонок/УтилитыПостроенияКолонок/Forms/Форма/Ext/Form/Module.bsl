&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Объект.ЭтоИнтерактивныйРежим = Истина;
	//Объект.БезопасныйРежим = Ложь;
	//Если Параметры.Свойство("ОбъектыНазначения") Тогда
	//	
	//КонецЕсли;	
//Fork 10-20	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ЭтаФорма.РабочаяПапка = "";
РабочаяПапка = ""; //"D:\ZV\Организации\Синерго\Полиметалл\Презентация по построению колонок";
Если ВыборПапки(РабочаяПапка) Тогда
	Если ВыгрузитьФайлыУтилит(РабочаяПапка) Тогда
		РабочийДиск = Лев(РабочаяПапка, 1);
		СН = геолОбщегоНазначенияКлиент.ПолучитьСерийныйНомерЖесткогоДиска(РабочийДиск);
		ДобавитьРабочиеФайлы(РабочаяПапка, СН);
		ЭтаФорма.РабочаяПапка = РабочаяПапка;
	КонецЕсли;	
КонецЕсли;	
ЭтаФорма.Закрыть();
КонецПроцедуры

Процедура ДобавитьРабочиеФайлы(РабочаяПапка, СН)
	СНч = Формат(СН, "чг=");  //СтрЗаменить(СН,Символы.НПП,"");
	Эл = Справочники["геолРабочиеФайлыЛокальногоКомпьютера"].НайтиПоРеквизиту("РабочийДискСН", СНч);
	Если ЗначениеЗаполнено(Эл) Тогда
		ЭлО = Эл.ПолучитьОбъект();
		ЭлО.РабочаяПапка = РабочаяПапка; //"Системные файлы для построения колонок в ArcGIS";	
		ЭлО.Записать();
	Иначе	
		НовыйЭл = Справочники["геолРабочиеФайлыЛокальногоКомпьютера"].СоздатьЭлемент();
		НовыйЭл.РабочаяПапка = РабочаяПапка;
		НовыйЭл.РабочийДискСН = СН;
		НовыйЭл.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
КонецПроцедуры

&НаКлиенте
Функция ВыборПапки(КаталогТабеля)
	КаталогТабеля = "D:\ZV\Организации\Синерго\Полиметалл\Презентация по построению колонок";
	Если ВыборКаталога(КаталогТабеля) Тогда
		Возврат Истина
	КонецЕсли;	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция ВыборКаталога(КаталогТабеля)
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);   //	ФайловаяСистемаКлиент.ОткрытьПроводник(КаталогТабеля);

	ДиалогВыбора.Заголовок ="Выберите каталог установки системных файлов для работы с ArcGIS";
	Если ЗначениеЗаполнено(КаталогТабеля) Тогда
	ДиалогВыбора.Каталог = КаталогТабеля;
	КонецЕсли;
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогТабеля = ДиалогВыбора.Каталог+"\";
		Возврат Истина;
	КонецЕсли;        //СоздатьКаталог()
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьДанныеФайла(ИмяМакета, РасширениеВременногоФайла)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	
	АдресХранилища = Новый УникальныйИдентификатор();
	Попытка
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета); 
		//сообщить(РасширениеВременногоФайла);
		ВременныйФайл = ПолучитьИмяВременногоФайла(РасширениеВременногоФайла); 
		//сообщить(ВременныйФайл);	
	Исключение
		сообщить( "Ошибка получения макета - "+ИмяМакета+" " + ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	//Значение = БезопасныйРежим();
	//Если ТипЗнч(Значение)=тип("Булево") и Значение=Истина тогда
	//	УстановитьОтключениеБезопасногоРежима(Истина);
	//	сообщить(БезопасныйРежим());
	//КонецЕсли;
	Макет.Записать(ВременныйФайл);
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВременныйФайл),АдресХранилища); 
	УдалитьФайлы(ВременныйФайл); 
	
	Возврат Адрес; 
КонецФункции 

&НаКлиенте
Функция ВыгрузитьФайлыУтилит(Путь);//(СсылкаНаОбъект)
	Попытка	
		Макеты = Новый Структура();
		Макеты.Вставить("ШаблонMDB", "mdb");
		Макеты.Вставить("Шаблон_AnnoMDB", "mdb");
		Макеты.Вставить("DrawColumn", "EXE");
		Макеты.Вставить("PreviewLayers", "EXE");	             
		Макеты.Вставить("ArcGIS_СтилиКолонок", "style");
		Макеты.Вставить("Образец", "mxd");
		Макеты.Вставить("Конструктор_стилей_ArcGIS", "EXE");
		Для каждого Макет Из Макеты Цикл
			ИД   = ПолучитьДанныеФайла(Макет.Ключ, Макет.Значение);
			МакетДоговора = ПолучитьИзВременногоХранилища(ИД);
			ПолноеИмяФайла = Путь + Макет.Ключ +"."+ Макет.Значение;
			МакетДоговора.Записать(ПолноеИмяФайла);
		КонецЦикла;	
	Исключение
		сообщить( "Ошибка выгрузки у утилит на диск." + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;	
КонецФункции
	
//НачатьПомещениеФайла - Вызывается диалог выбора файла. Выбранный файл помещается во временное хранилище. 
//НачатьПолучениеФайлов - Выполняется получение данных файла с БД и сохранение файла в указанный пользователем каталог.
//Файл - Доступ к свойствам файла по полному пути к файлу.
//ПолучитьИзВременногоХранилища, ПоместитьВоВременноеХранилище - В данном примере это методы работы с двоичными данными файла.
//НачатьПолучениеКаталогаДокументов (КаталогДокументов) - Получение каталога документов пользователя (аналог КаталогДокументов).
//ОписаниеПередаваемогоФайла - Определение полного имени файла в ОС по которому будет сохранен файл из ИБ.
//ОписаниеОповещения - Описание вызова процедуры которая будет вызвана после какого-то действия пользователя (Пример: После действия пользователя НачатьПолучениеКаталогаДокументов будет вызвана процедура, где в параметре "ИмяКаталогаДокументов" будет строка в полным адресом к каталогу документов пользоватя: "C:\Users\Имя пользователя\Documents"). 
//НачатьЗапускПриложения - Открытие файла ассоциированным приложением. 
#Область Сохранение_файла

&НаКлиенте
Процедура СохранитьФайл(Команда)
    НачатьПомещениеФайла(Новый ОписаниеОповещения("СохранитьФайлЗавершение", ЭтотОбъект),,, Истина, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт // запускается ПОСЛЕ выбора файла в диалоге
    
    Если Не Результат Тогда
        Возврат;
    КонецЕсли;
    
    // Используется для определения имени файла. Что бы потом можно было сохранить файл в ОС и потом его открыть.
    Файл = Новый Файл(ВыбранноеИмяФайла);
    
    СохранитьФайлВКонстантуНаСервереБезКонтекста(Адрес, Файл.Имя);
    
КонецПроцедуры // СохранитьФайлЗавершение

&НаСервереБезКонтекста
Процедура СохранитьФайлВКонстантуНаСервереБезКонтекста(Адрес, ИмяФайла)  
    
    ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
    
    СтруктураДанныхФайла = Новый Структура;
    СтруктураДанныхФайла.Вставить("ИмяФайла",        ИмяФайла);
    СтруктураДанныхФайла.Вставить("ДанныеФайла",    ДанныеФайла);
    
    Константы.ДанныеФайла.Установить(Новый ХранилищеЗначения(СтруктураДанныхФайла));
    
КонецПроцедуры // СохранитьФайлВКонстантуНаСервереБезКонтекста

#КонецОбласти

#Область Открытие_файла

&НаКлиенте
Процедура ОткрытьФайл(Команда)
    
    Если ПроверитьНаличиеФайлаВКонстантеНаСервереБезКонтекста() Тогда
        
        // Начиная с версии 8.3.6.1760 (отказ от асинхронных методов)
        НачатьПолучениеКаталогаДокументов(Новый ОписаниеОповещения("КаталогДокументовЗавершение", ЭтотОбъект));
        // До 8.3.6.1760
        //КаталогДокументов = КаталогДокументов();
        //КаталогДокументовЗавершение(КаталогДокументов, "");
        
    Иначе
        
        СообщениеПользователю = Новый СообщениеПользователю;
        СообщениеПользователю.Текст = "Файл не был загружен в константу.";
        СообщениеПользователю.Сообщить();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура КаталогДокументовЗавершение(ИмяКаталогаДокументов, ДополнительныеПараметры) Экспорт 
    
    Адрес        = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
    ИмяФайла    = "";
    
    ПолучитьДанныеФайлаНаСервереБезКонтекста(Адрес, ИмяФайла);
    
    ПолноеИмяФайла = ИмяКаталогаДокументов + ИмяФайла;
    
    МассивПолучаемыхФайлов = Новый Массив;
    МассивПолучаемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, Адрес));
    
    НачатьПолучениеФайлов(Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтотОбъект), МассивПолучаемыхФайлов,, Ложь);
    
КонецПроцедуры // КаталогДокументовЗавершение

&НаКлиенте
Процедура ОткрытьФайлЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт 
    
    Если ПолученныеФайлы = Неопределено
        И Не (ТипЗнч(ПолученныеФайлы) = Тип("Массив")
            И ПолученныеФайлы.Количество()) Тогда
        Возврат;
    КонецЕсли;
    
    НачатьЗапускПриложения(Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершение", ЭтотОбъект), ПолученныеФайлы[0].Имя);
    
КонецПроцедуры // ОткрытьФайлЗавершение

&НаКлиенте
Процедура НачатьЗапускПриложенияЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт 
    
    // Заглушка
    
КонецПроцедуры // НачатьЗапускПриложенияЗавершение

&НаСервереБезКонтекста
Процедура ПолучитьДанныеФайлаНаСервереБезКонтекста(Адрес, ИмяФайла)  
    
    СтруктураФайла = Константы.ДанныеФайла.Получить().Получить();
    
    ИмяФайла = СтруктураФайла.ИмяФайла;
    
    ПоместитьВоВременноеХранилище(СтруктураФайла.ДанныеФайла, Адрес);
    
КонецПроцедуры // ПолучитьДанныеФайлаНаСервереБезКонтекста

#КонецОбласти

#Область Удаление_файла

&НаКлиенте
Процедура УдалитьФайл(Команда)
    
    Если ПроверитьНаличиеФайлаВКонстантеНаСервереБезКонтекста() Тогда
        
        ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьФайлЗавершение", ЭтотОбъект),
                            "Данные файла будут безвозвратно удалены.
                            |Продолжить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да,, КодВозвратаДиалога.Нет);
        
    Иначе
        
        СообщениеПользователю = Новый СообщениеПользователю;
        СообщениеПользователю.Текст = "Файл не был загружен в константу.";
        СообщениеПользователю.Сообщить();
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
    
    Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    УдалитьФайлНаСервереБезКонтекста();
    
КонецПроцедуры // УдалитьФайлЗавершение

&НаСервереБезКонтекста
Процедура УдалитьФайлНаСервереБезКонтекста()  
    
    Константы.ДанныеФайла.Установить(Неопределено);
    
КонецПроцедуры // УдалитьФайлНаСервереБезКонтекста

#КонецОбласти

// Служебная процедура для проверки наличия загруженного файла
&НаСервереБезКонтекста
Функция   ПроверитьНаличиеФайлаВКонстантеНаСервереБезКонтекста()  
    
    ДанныеФайла = Константы.ДанныеФайла.Получить();
    
    Возврат Не ДанныеФайла.Получить() = Неопределено;
    
КонецФункции // ПроверитьНаличиеФайлаВКонстантеНаСервереБезКонтекста




